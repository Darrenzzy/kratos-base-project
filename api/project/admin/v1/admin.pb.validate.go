// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/project/admin/v1/admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}
	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}
	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}
	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReplyMultiError, or
// nil if none found.
func (m *LogoutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutReplyMultiError(errors)
	}
	return nil
}

// LogoutReplyMultiError is an error wrapping multiple validation errors
// returned by LogoutReply.ValidateAll() if the designated constraints aren't met.
type LogoutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReplyMultiError) AllErrors() []error { return m }

// LogoutReplyValidationError is the validation error returned by
// LogoutReply.Validate if the designated constraints aren't met.
type LogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReplyValidationError) ErrorName() string { return "LogoutReplyValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReplyValidationError{}

// Validate checks the field values on GetAdministratorInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAdministratorInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdministratorInfoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdministratorInfoReplyMultiError, or nil if none found.
func (m *GetAdministratorInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdministratorInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Mobile

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return GetAdministratorInfoReplyMultiError(errors)
	}
	return nil
}

// GetAdministratorInfoReplyMultiError is an error wrapping multiple validation
// errors returned by GetAdministratorInfoReply.ValidateAll() if the
// designated constraints aren't met.
type GetAdministratorInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdministratorInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdministratorInfoReplyMultiError) AllErrors() []error { return m }

// GetAdministratorInfoReplyValidationError is the validation error returned by
// GetAdministratorInfoReply.Validate if the designated constraints aren't met.
type GetAdministratorInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdministratorInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdministratorInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdministratorInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdministratorInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdministratorInfoReplyValidationError) ErrorName() string {
	return "GetAdministratorInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdministratorInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdministratorInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdministratorInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdministratorInfoReplyValidationError{}

// Validate checks the field values on CreateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGoodsRequestMultiError, or nil if none found.
func (m *CreateGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		err := CreateGoodsRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Style

	// no validation rules for Size

	// no validation rules for Code

	// no validation rules for Price

	// no validation rules for Number

	if len(errors) > 0 {
		return CreateGoodsRequestMultiError(errors)
	}
	return nil
}

// CreateGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGoodsRequestMultiError) AllErrors() []error { return m }

// CreateGoodsRequestValidationError is the validation error returned by
// CreateGoodsRequest.Validate if the designated constraints aren't met.
type CreateGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGoodsRequestValidationError) ErrorName() string {
	return "CreateGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGoodsRequestValidationError{}

// Validate checks the field values on UpdateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGoodsRequestMultiError, or nil if none found.
func (m *UpdateGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Style

	// no validation rules for Size

	// no validation rules for Code

	// no validation rules for Price

	// no validation rules for Number

	if len(errors) > 0 {
		return UpdateGoodsRequestMultiError(errors)
	}
	return nil
}

// UpdateGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGoodsRequestMultiError) AllErrors() []error { return m }

// UpdateGoodsRequestValidationError is the validation error returned by
// UpdateGoodsRequest.Validate if the designated constraints aren't met.
type UpdateGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGoodsRequestValidationError) ErrorName() string {
	return "UpdateGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGoodsRequestValidationError{}

// Validate checks the field values on DeleteGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGoodsRequestMultiError, or nil if none found.
func (m *DeleteGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGoodsRequestMultiError(errors)
	}
	return nil
}

// DeleteGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGoodsRequestMultiError) AllErrors() []error { return m }

// DeleteGoodsRequestValidationError is the validation error returned by
// DeleteGoodsRequest.Validate if the designated constraints aren't met.
type DeleteGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGoodsRequestValidationError) ErrorName() string {
	return "DeleteGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGoodsRequestValidationError{}

// Validate checks the field values on GetGoodsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGoodsRequestMultiError, or nil if none found.
func (m *GetGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGoodsRequestMultiError(errors)
	}
	return nil
}

// GetGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by GetGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGoodsRequestMultiError) AllErrors() []error { return m }

// GetGoodsRequestValidationError is the validation error returned by
// GetGoodsRequest.Validate if the designated constraints aren't met.
type GetGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGoodsRequestValidationError) ErrorName() string { return "GetGoodsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGoodsRequestValidationError{}

// Validate checks the field values on ListGoodsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGoodsRequestMultiError, or nil if none found.
func (m *ListGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListGoodsRequestMultiError(errors)
	}
	return nil
}

// ListGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by ListGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGoodsRequestMultiError) AllErrors() []error { return m }

// ListGoodsRequestValidationError is the validation error returned by
// ListGoodsRequest.Validate if the designated constraints aren't met.
type ListGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGoodsRequestValidationError) ErrorName() string { return "ListGoodsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGoodsRequestValidationError{}

// Validate checks the field values on ListGoodsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListGoodsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGoodsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListGoodsReplyMultiError,
// or nil if none found.
func (m *ListGoodsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGoodsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGoodsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGoodsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGoodsReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGoodsReplyMultiError(errors)
	}
	return nil
}

// ListGoodsReplyMultiError is an error wrapping multiple validation errors
// returned by ListGoodsReply.ValidateAll() if the designated constraints
// aren't met.
type ListGoodsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGoodsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGoodsReplyMultiError) AllErrors() []error { return m }

// ListGoodsReplyValidationError is the validation error returned by
// ListGoodsReply.Validate if the designated constraints aren't met.
type ListGoodsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGoodsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGoodsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGoodsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGoodsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGoodsReplyValidationError) ErrorName() string { return "ListGoodsReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListGoodsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGoodsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGoodsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGoodsReplyValidationError{}

// Validate checks the field values on GoodsInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoodsInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoodsInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoodsInfoResponseMultiError, or nil if none found.
func (m *GoodsInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoodsInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Style

	// no validation rules for Size

	// no validation rules for Code

	// no validation rules for Price

	// no validation rules for Number

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return GoodsInfoResponseMultiError(errors)
	}
	return nil
}

// GoodsInfoResponseMultiError is an error wrapping multiple validation errors
// returned by GoodsInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type GoodsInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoodsInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoodsInfoResponseMultiError) AllErrors() []error { return m }

// GoodsInfoResponseValidationError is the validation error returned by
// GoodsInfoResponse.Validate if the designated constraints aren't met.
type GoodsInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodsInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodsInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodsInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodsInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodsInfoResponseValidationError) ErrorName() string {
	return "GoodsInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GoodsInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodsInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodsInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodsInfoResponseValidationError{}

// Validate checks the field values on GoodsCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GoodsCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoodsCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoodsCheckResponseMultiError, or nil if none found.
func (m *GoodsCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoodsCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	if len(errors) > 0 {
		return GoodsCheckResponseMultiError(errors)
	}
	return nil
}

// GoodsCheckResponseMultiError is an error wrapping multiple validation errors
// returned by GoodsCheckResponse.ValidateAll() if the designated constraints
// aren't met.
type GoodsCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoodsCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoodsCheckResponseMultiError) AllErrors() []error { return m }

// GoodsCheckResponseValidationError is the validation error returned by
// GoodsCheckResponse.Validate if the designated constraints aren't met.
type GoodsCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodsCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodsCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodsCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodsCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodsCheckResponseValidationError) ErrorName() string {
	return "GoodsCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GoodsCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodsCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodsCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodsCheckResponseValidationError{}

// Validate checks the field values on SaleGoodsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaleGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaleGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaleGoodsRequestMultiError, or nil if none found.
func (m *SaleGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaleGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Number

	if len(errors) > 0 {
		return SaleGoodsRequestMultiError(errors)
	}
	return nil
}

// SaleGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by SaleGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type SaleGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaleGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaleGoodsRequestMultiError) AllErrors() []error { return m }

// SaleGoodsRequestValidationError is the validation error returned by
// SaleGoodsRequest.Validate if the designated constraints aren't met.
type SaleGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaleGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaleGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaleGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaleGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaleGoodsRequestValidationError) ErrorName() string { return "SaleGoodsRequestValidationError" }

// Error satisfies the builtin error interface
func (e SaleGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaleGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaleGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaleGoodsRequestValidationError{}

// Validate checks the field values on SaleGoodsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaleGoodsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaleGoodsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaleGoodsReplyMultiError,
// or nil if none found.
func (m *SaleGoodsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaleGoodsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	if len(errors) > 0 {
		return SaleGoodsReplyMultiError(errors)
	}
	return nil
}

// SaleGoodsReplyMultiError is an error wrapping multiple validation errors
// returned by SaleGoodsReply.ValidateAll() if the designated constraints
// aren't met.
type SaleGoodsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaleGoodsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaleGoodsReplyMultiError) AllErrors() []error { return m }

// SaleGoodsReplyValidationError is the validation error returned by
// SaleGoodsReply.Validate if the designated constraints aren't met.
type SaleGoodsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaleGoodsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaleGoodsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaleGoodsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaleGoodsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaleGoodsReplyValidationError) ErrorName() string { return "SaleGoodsReplyValidationError" }

// Error satisfies the builtin error interface
func (e SaleGoodsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaleGoodsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaleGoodsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaleGoodsReplyValidationError{}
